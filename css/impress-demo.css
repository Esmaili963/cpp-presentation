
.impress-supported .fallback-message {
    display: none;
}


.step {
    position: relative;
    width: 900px;
    padding: 40px;
    margin: 20px auto;

    -webkit-box-sizing: border-box;
    -moz-box-sizing:    border-box;
    -ms-box-sizing:     border-box;
    -o-box-sizing:      border-box;
    box-sizing:         border-box;

    font-family: 'PT Serif', georgia, serif;
    font-size: 48px;
    line-height: 1.5;
}

/*
    ... and we enhance the styles for impress.js.

    Basically we remove the margin and make inactive steps a little bit transparent.
*/
.impress-enabled .step {
    margin: 0;
    opacity: 0.3;

    -webkit-transition: opacity 1s;
    -moz-transition:    opacity 1s;
    -ms-transition:     opacity 1s;
    -o-transition:      opacity 1s;
    transition:         opacity 1s;
}

.impress-enabled .step.active { opacity: 1 }

#source q {
    font-size: 60px;
}

/*
    And the "it's in 3D" step again brings some 3D typography - just for fun.

    Because we want to position <span> elements in 3D we set transform-style to
    `preserve-3d` on the paragraph.
    It is not needed by webkit browsers, but it is in Firefox. It's hard to say
    which behaviour is correct as 3D transforms spec is not very clear about it.

/*
    Below we position each word separately along Z axis and we want it to transition
    to default position in 0.5s when the step gets `present` class.

    Quite a simple idea, but lot's of styles and prefixes.
*/

.impress-on-overview .step {
    opacity: 1;
    cursor: pointer;
}

/*
    Now, when we have all the steps styled let's give users a hint how to navigate
    around the presentation.

    The best way to do this would be to use JavaScript, show a delayed hint for a
    first time users, then hide it and store a status in cookie or localStorage...

    But I wanted to have some CSS fun and avoid additional scripting...

    Let me explain it first, so maybe the transition magic will be more readable
    when you read the code.

    First of all I wanted the hint to appear only when user is idle for a while.
    You can't detect the 'idle' state in CSS, but I delayed a appearing of the
    hint by 5s using transition-delay.

    You also can't detect in CSS if the user is a first-time visitor, so I had to
    make an assumption that I'll only show the hint on the first step. And when
    the step is changed hide the hint, because I can assume that user already
    knows how to navigate.

    To summarize it - hint is shown when the user is on the first step for longer
    than 5 seconds.

    The other problem I had was caused by the fact that I wanted the hint to fade
    in and out. It can be easily achieved by transitioning the opacity property.
    But that also meant that the hint was always on the screen, even if totally
    transparent. It covered part of the screen and you couldn't correctly clicked
    through it.
    Unfortunately you cannot transition between display `block` and `none` in pure
    CSS, so I needed a way to not only fade out the hint but also move it out of
    the screen.

    I solved this problem by positioning the hint below the bottom of the screen
    with CSS transform and moving it up to show it. But I also didn't want this move
    to be visible. I wanted the hint only to fade in and out visually, so I delayed
    the fade in transition, so it starts when the hint is already in its correct
    position on the screen.

    I know, it sounds complicated ... maybe it would be easier with the code?
*/


/* -------------------------------------------------------- */
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
    margin: 0;
    padding: 0;
    border: 0;
    font-size: 100%;
    font: inherit;
    vertical-align: baseline;
}

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
    display: block;
}

body {
    line-height: 1;
}

body {
    font-family: 'PT Sans', sans-serif;
    min-height: 740px;
    background: #2a2164;

    }
@font-face {
    font-family: yekanbakh;
    src: url(yekanbakh-black.ttf);
}
@font-face {
    font-family: iransans;
    src: url(iransans.ttf);
}
h1 {
    font-family: yekanbakh;
}
p{
    font-family: iransans;
    display: flex;
    color: rgb(219, 215, 215);
    font-size: 30px;
}
.flex{
    display: flex;
    flex-direction: column;
    direction: rtl;
}

.center{
    justify-content: center;
    align-items: center;
}


h1{
    color: white;
    font-size: 40px;
}
.slide {
    width: 900px;
    height: 700px;
    padding: 40px 40px;

    background-color: #11173b;
    border: 1px solid rgba(0, 0, 0, .3);
    border-radius: 10px;
    box-shadow: 0 0 10px white;

    color: rgb(102, 102, 102);
    text-shadow: 0 2px 2px rgba(0, 0, 0, .1);

}
#chapter span{
    color: red;
}

h2{
    color: white;
    font-family: yekanbakh;
}

#def-programming p{
    margin-top: -50px;
}
.image-base{
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    color: wheat;
    font-size: 30px;
    font-family: iransans;
}

#def-programming img{
    height: auto;
    width: 30%;
    margin-top: 30px;
    padding-bottom: 5px;
}
#level p{
    margin-top: -40px;
}
#level span, #asembely span, #high span, #history span, #c span, #use span, #codesteps span, #compiler span
,#proto span, #ide span{
    font-weight: 700;
}
img{
    border-radius: 3px;
    box-shadow: 0 0 40px #7741bd;
}
#history img{
    width: 50%;
    margin-top: 20px;
}
#cpp img{
    margin-top: 20px;
}
#cpp .image-base p{
    font-size: 20px;
    margin-top: 10px;
}
a{
    color: green;
}
.color-b{
    color: rgb(232, 232, 195);
}